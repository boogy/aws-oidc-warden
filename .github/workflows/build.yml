name: Build

on:
  push:
    tags:
      - "*"

env:
  REPO_NAME: aws-oidc-warden
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        module: [apigateway, alb, lambdaurl]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: stable

      - name: Set up ko
        uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9

      - name: Log in to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push default module (apigateway)
        env:
          GH_REPO: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          DR_REPO: ${{ env.DOCKERHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          VERSION: ${{ steps.extract_tag.outputs.tag }}
        run: |
          echo "Building and pushing apigateway to GHCR and Docker Hub..."
          echo "VERSION: $VERSION"

          KO_DOCKER_REPO=$GH_REPO ko publish ./cmd/apigateway/ --tags=$VERSION,latest --bare
          KO_DOCKER_REPO=$DR_REPO ko publish ./cmd/apigateway/ --tags=$VERSION,latest --bare
        timeout-minutes: 15

      - name: Build and push ${{ matrix.module }} to GHCR
        env:
          KO_DOCKER_REPO: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          VERSION: ${{ steps.extract_tag.outputs.tag }}
        run: |
          echo "Building and pushing ${{ matrix.module }} to GHCR..."
          echo "KO_DOCKER_REPO: $KO_DOCKER_REPO"
          echo "VERSION: $VERSION"
          ko publish ./cmd/${{ matrix.module }}/ --tags=${{ matrix.module }}-$VERSION,${{ matrix.module }}-latest --bare
        timeout-minutes: 15

      - name: Build and push ${{ matrix.module }} to Docker Hub
        env:
          KO_DOCKER_REPO: ${{ env.DOCKERHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          VERSION: ${{ steps.extract_tag.outputs.tag }}
        run: |
          echo "Building and pushing ${{ matrix.module }} to Docker Hub..."
          echo "KO_DOCKER_REPO: $KO_DOCKER_REPO"
          echo "VERSION: $VERSION"
          ko publish ./cmd/${{ matrix.module }}/ --tags=${{ matrix.module }}-$VERSION,${{ matrix.module }}-latest --bare
        timeout-minutes: 15

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        module: [apigateway, alb, lambdaurl]
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Pull image for scanning
        env:
          IMAGE_REF: ${{ env.DOCKERHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:${{ matrix.module }}-${{ steps.extract_tag.outputs.tag }}
        run: |
          echo "Pulling image for scanning: $IMAGE_REF"
          for attempt in {1..3}; do
            if docker pull $IMAGE_REF; then
              break
            fi
            echo "Retry $attempt: Image not yet available, waiting..."
            sleep 10
            if [ $attempt -eq 5 ]; then
              echo "Failed to pull image after 5 attempts"
              exit 1
            fi
          done

      - name: Scan container image
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # v0.32.0
        with:
          image-ref: ${{ env.DOCKERHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:${{ matrix.module }}-${{ steps.extract_tag.outputs.tag }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

  generate-summary:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    permissions:
      actions: write # Required for writing to GITHUB_STEP_SUMMARY
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate deployment info
        run: |
          echo "## Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following container images have been built and pushed:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for registry in "${{ env.GHCR_REGISTRY }}" "${{ env.DOCKERHUB_REGISTRY }}"; do
            echo "### $( [[ $registry == "${{ env.GHCR_REGISTRY }}" ]] && echo "GitHub Container Registry" || echo "Docker Hub" )" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**API Gateway module:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`$registry/${{ github.repository_owner }}/${{ env.REPO_NAME }}:apigateway-${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`$registry/${{ github.repository_owner }}/${{ env.REPO_NAME }}:apigateway-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**ALB module:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`$registry/${{ github.repository_owner }}/${{ env.REPO_NAME }}:alb-${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`$registry/${{ github.repository_owner }}/${{ env.REPO_NAME }}:alb-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Lambda URL module:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`$registry/${{ github.repository_owner }}/${{ env.REPO_NAME }}:lambdaurl-${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`$registry/${{ github.repository_owner }}/${{ env.REPO_NAME }}:lambdaurl-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          echo "### Architectures" >> $GITHUB_STEP_SUMMARY
          echo "- linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage in AWS Lambda" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Choose the appropriate image based on your Lambda integration (use GHCR or Docker Hub images):" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:apigateway-${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application Load Balancer:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:alb-${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda URL:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:lambdaurl-${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
