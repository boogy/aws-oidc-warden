name: Container Build and Push

on:
  push:
    tags:
      - "*"

env:
  REPO_NAME: aws-oidc-warden
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant:
          - name: "apigateway"
            path: "./cmd/apigateway"
            is_default: true
          - name: "alb"
            path: "./cmd/alb"
            is_default: false
          - name: "lambdaurl"
            path: "./cmd/lambdaurl"
            is_default: false
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: stable

      - name: Set up ko
        uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set image tags
        id: tags
        run: |
          VERSION="${{ steps.extract_tag.outputs.tag }}"
          VARIANT="${{ matrix.variant.name }}"
          
          if [[ "${{ matrix.variant.is_default }}" == "true" ]]; then
            # Default variant gets both variant-specific and default tags
            echo "tags=${VERSION}-${VARIANT},latest-${VARIANT},${VERSION},latest" >> $GITHUB_OUTPUT
          else
            # Non-default variants get only variant-specific tags
            echo "tags=${VERSION}-${VARIANT},latest-${VARIANT}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push to GitHub Container Registry
        env:
          KO_DOCKER_REPO: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}
        run: |
          echo "Building and pushing ${{ matrix.variant.name }} variant to GHCR..."
          echo "KO_DOCKER_REPO: $KO_DOCKER_REPO"
          echo "Tags: ${{ steps.tags.outputs.tags }}"
          
          ko publish ${{ matrix.variant.path }} \
            --tags=${{ steps.tags.outputs.tags }} \
            --bare
        timeout-minutes: 10

      - name: Build and push to Docker Hub
        env:
          KO_DOCKER_REPO: ${{ env.DOCKERHUB_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}
        run: |
          echo "Building and pushing ${{ matrix.variant.name }} variant to Docker Hub..."
          echo "KO_DOCKER_REPO: $KO_DOCKER_REPO"
          echo "Tags: ${{ steps.tags.outputs.tags }}"
          
          ko publish ${{ matrix.variant.path }} \
            --tags=${{ steps.tags.outputs.tags }} \
            --bare
        timeout-minutes: 10

      - name: Pull image for scanning
        if: matrix.variant.is_default == true
        env:
          IMAGE_REF: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:${{ steps.extract_tag.outputs.tag }}
        run: |
          echo "Pulling image for scanning: $IMAGE_REF"
          # Wait a moment for image to be available in registry
          sleep 10
          docker pull $IMAGE_REF

      - name: Scan container image
        if: matrix.variant.is_default == true
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # v0.31.0
        with:
          image-ref: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPO_NAME }}:${{ steps.extract_tag.outputs.tag }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

  generate-deployment-info:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
    steps:
      - name: Extract tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate deployment info
        env:
          REPO_NAME: aws-oidc-warden
          GHCR_REGISTRY: ghcr.io
          DOCKERHUB_REGISTRY: docker.io
        run: |
          echo "## Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following container images have been built and pushed:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "**Default (API Gateway):**" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway variant:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-apigateway\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:latest-apigateway\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ALB variant:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-alb\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:latest-alb\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda URL variant:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-lambdaurl\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:latest-lambdaurl\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "**Default (API Gateway):**" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway variant:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-apigateway\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:latest-apigateway\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ALB variant:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-alb\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:latest-alb\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda URL variant:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-lambdaurl\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker.io/${{ github.repository_owner }}/aws-oidc-warden:latest-lambdaurl\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Architectures" >> $GITHUB_STEP_SUMMARY
          echo "- linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage in AWS Lambda" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Choose the appropriate image based on your Lambda integration:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway (default):**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application Load Balancer:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-alb" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda URL:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository_owner }}/aws-oidc-warden:${{ steps.extract_tag.outputs.tag }}-lambdaurl" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
